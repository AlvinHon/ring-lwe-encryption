use rand::Rng;
use rlwe_encryption::{key_gen, standard, IntField};

/// Test the encryption scheme with random messages. The keys are generated by the standard method.
#[test]
fn test_standard() {
    let rng = &mut rand::thread_rng();
    let (ek, dk) = standard(rng);

    for _ in 0..100 {
        let message = (0..256).map(|_| rng.gen_range(0..2)).collect::<Vec<i32>>();
        let c = ek.encrypt(rng, message.clone());
        let m = dk.decrypt(c)[..message.len()].to_vec();
        assert_eq!(message, m);
    }
}

/// Test the encryption scheme with random messages. The keys are generated with parameters N=512, Q=8383489.
#[test]
fn test_key_gen_q8383489_n512() {
    struct ZqI64;

    impl IntField for ZqI64 {
        type I = i64;
        const Q: i64 = 8383489;
        const B: i64 = 1;

        fn modulo(x: &Self::I) -> Self::I {
            let a = x.rem_euclid(Self::Q);
            if a > Self::Q / 2 {
                a - Self::Q
            } else {
                a
            }
        }
    }

    let rng = &mut rand::thread_rng();
    let (ek, dk) = key_gen::<ZqI64, 512>(rng);

    for _ in 0..100 {
        let message = (0..512).map(|_| rng.gen_range(0..2)).collect::<Vec<i64>>();
        let c = ek.encrypt(rng, message.clone());
        let m = dk.decrypt(c)[..message.len()].to_vec();
        assert_eq!(message, m);
    }
}

/// Test the encryption scheme with random messages. The keys are generated with parameters N=1024, Q=16760833.
#[test]
fn test_key_gen_q16760833_n1024() {
    struct ZqI64;

    impl IntField for ZqI64 {
        type I = i64;
        const Q: i64 = 16760833;
        const B: i64 = 1;

        fn modulo(x: &Self::I) -> Self::I {
            let a = x.rem_euclid(Self::Q);
            if a > Self::Q / 2 {
                a - Self::Q
            } else {
                a
            }
        }
    }

    let rng = &mut rand::thread_rng();
    let (ek, dk) = key_gen::<ZqI64, 1024>(rng);

    for _ in 0..100 {
        let message = (0..1024).map(|_| rng.gen_range(0..2)).collect::<Vec<i64>>();
        let c = ek.encrypt(rng, message.clone());
        let m = dk.decrypt(c)[..message.len()].to_vec();
        assert_eq!(message, m);
    }
}
